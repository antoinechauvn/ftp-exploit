from scapy.all import *
from scapy.layers.inet import TCP
__author__ = "Chauvin Antoine"
__copyright__ = ""
__credits__ = ["Chauvin Antoine"]
__license__ = ""
__version__ = "1.0"
__maintainer__ = "Chauvin Antoine"
__email__ = "antoine.chauvin@live.fr"
__status__ = "Production"


class FtpSniffer:
    """
    On définis une classe FtpSniffer qui se chargera
    de filtrer toutes les trames en manipulant le framework scapy
    """

    def __init__(self):
        """
        On définis un sniffer sur le port 21 qui utilisera la carte réseau par défaut (conf.iface)
        On va ensuite traiter nos 'trames' en ajoutant une fonction de callback (prn) qui prendra
        la trame en paramètre
        """

        self.sniffer = sniff(filter="port 21", prn=self.ftp_filter, store=False)

    def ftp_filter(self, packet) -> None:
        """
        Méthode de classe qui va filtrer la présence du protocole FTP (à savoir que le protocole n'est pas sécurisé)
        On va ensuite parser les différents arguments du paquet
        """

        # Explicite
        if packet.haslayer(Raw):
            # On charge les données brutes pour ensuite les traiter
            data = packet[Raw].load

            # On convertis les données brutes (bytes) en chaine de caractère(string)
            data = data.decode("utf-8").strip()

            # Filtrage de la chaîne de caractère
            if data.startswith("USER") or data.startswith("PASS"):

                # On formate la variable et affiche en couleur avec colorama
                print(data)


if __name__ == "__main__":
    my_sniffer = FtpSniffer()
